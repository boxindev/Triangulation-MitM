#include <iostream>
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>  // rand(), srand()
#include <time.h>
#include <stdbool.h>
#include <vector>
#include <map>
#include <cmath>

using namespace std;


#define Nb 4
#define BLOCKLEN 16
#define Nk 8
#define Nr 10
#define keyExpSize 176


static const uint8_t sbox[256] = {
  //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

static const uint8_t rsbox[256] = {
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };

static const uint8_t Rcon[11] = {0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
static uint8_t RoundKey[keyExpSize] = {0};


uint8_t take8(uint32_t x, int i){
    uint8_t out = (x>>(i*8)) & 0xff;
    return out;
}

uint8_t mul2(uint8_t x){
    uint8_t out = ((x<<1) ^ (((x>>7) & 1) * 0x1b));
    return out;
}

uint8_t mul3(uint8_t x){
    uint8_t out = mul2(x) ^ x;
    return out;
}

uint8_t mul4(uint8_t x){
    uint8_t out = mul2(mul2(x));
    return out;
}

uint8_t mul8(uint8_t x){
    uint8_t out = mul2(mul2(mul2(x)));
    return out;
}

uint8_t mul9(uint8_t x){
    uint8_t out = mul8(x) ^ x;
    return out;
}

uint8_t mulB(uint8_t x){
    uint8_t out = mul8(x) ^ mul2(x) ^ x;
    return out;
}

uint8_t mulD(uint8_t md_in){
    uint8_t out = mul8(md_in) ^ mul4(md_in) ^ md_in;
    return out;
}

uint8_t mulE(uint8_t me_in){
    uint8_t out = mul8(me_in) ^ mul4(me_in) ^ mul2(me_in);
    return out;
}

uint8_t mulE1(uint8_t x){
    uint8_t out = mul8(mul8(mul3(x))) ^ mul4(mul4(mul2(x))) ^ x;
    return out;
}

uint8_t mul4F(uint8_t x){
    uint8_t out = mul8(mul8(x)) ^ mul4(mul3(x)) ^ mul3(x);
    return out;
}

uint8_t mulE5(uint8_t x){
    uint8_t out = mul8(mul8(mul3(x))) ^ mul4(mul4(mul2(x))) ^ mul4(x) ^ (x);
    return out;
}


uint8_t XTIME(uint8_t x) {  
	return ((x << 1) ^ ((x & 0x80) ? 0x1b : 0x00));
}

uint8_t multiply(uint8_t a, uint8_t b) {
	unsigned char temp[8] = { a };
    uint8_t tempmultiply = 0x00;
	int i;
	for (i = 1; i < 8; i++) {
		temp[i] = XTIME(temp[i - 1]);
	}
	tempmultiply = (b & 0x01) * a;
	for (i = 1; i <= 7; i++) {
		tempmultiply ^= (((b >> i) & 0x01) * temp[i]);
	}
	return tempmultiply;
}

static void KeyExpansion_S2S(uint8_t *sKey, uint8_t *sKey_new)
{
    sKey_new[0] = sKey[26] ^ sbox[sKey[25]];
    sKey_new[1] = sKey[27] ^ sbox[sKey_new[0]];
    sKey_new[2] = sKey[28];
    sKey_new[3] = sKey[29];
    sKey_new[4] = sKey[30];
    sKey_new[5] = sKey[31];
    sKey_new[6] = sKey[24];
    sKey_new[7] = sKey[25];

    sKey_new[8] = sKey[2] ^ sbox[sKey[1]];
    sKey_new[9] = sKey[3] ^ sbox[sKey_new[8]];
    sKey_new[10] = sKey[4];
    sKey_new[11] = sKey[5];
    sKey_new[12] = sKey[6];
    sKey_new[13] = sKey[7];
    sKey_new[14] = sKey[0];
    sKey_new[15] = sKey[1];

    sKey_new[16] = sKey[10] ^ sbox[sKey[9]];
    sKey_new[17] = sKey[11] ^ sbox[sKey_new[16]];
    sKey_new[18] = sKey[12];
    sKey_new[19] = sKey[13];
    sKey_new[20] = sKey[14];
    sKey_new[21] = sKey[15];
    sKey_new[22] = sKey[8];
    sKey_new[23] = sKey[9];

    sKey_new[24] = sKey[18] ^ sbox[sKey[17]];
    sKey_new[25] = sKey[19] ^ sbox[sKey_new[24]];
    sKey_new[26] = sKey[20];
    sKey_new[27] = sKey[21];
    sKey_new[28] = sKey[22];
    sKey_new[29] = sKey[23];
    sKey_new[30] = sKey[16];
    sKey_new[31] = sKey[17];
}

static void KeyExpansion_S2S_inv(uint8_t *sKey, uint8_t *sKey_new)
{
    sKey_new[0] = sKey[14];
    sKey_new[1] = sKey[15];
    sKey_new[2] = sKey[8] ^ sbox[sKey[15]];
    sKey_new[3] = sKey[9] ^ sbox[sKey[8]];
    sKey_new[4] = sKey[10];
    sKey_new[5] = sKey[11];
    sKey_new[6] = sKey[12];
    sKey_new[7] = sKey[13];

    sKey_new[8] = sKey[22];
    sKey_new[9] = sKey[23];
    sKey_new[10] = sKey[16] ^ sbox[sKey[23]];
    sKey_new[11] = sKey[17] ^ sbox[sKey[16]];
    sKey_new[12] = sKey[18];
    sKey_new[13] = sKey[19];
    sKey_new[14] = sKey[20];
    sKey_new[15] = sKey[21];

    sKey_new[16] = sKey[30];
    sKey_new[17] = sKey[31];
    sKey_new[18] = sKey[24] ^ sbox[sKey[31]];
    sKey_new[19] = sKey[25] ^ sbox[sKey[24]];
    sKey_new[20] = sKey[26];
    sKey_new[21] = sKey[27];
    sKey_new[22] = sKey[28];
    sKey_new[23] = sKey[29];

    sKey_new[24] = sKey[6];
    sKey_new[25] = sKey[7];
    sKey_new[26] = sKey[0] ^ sbox[sKey[7]];
    sKey_new[27] = sKey[1] ^ sbox[sKey[0]];
    sKey_new[28] = sKey[2];
    sKey_new[29] = sKey[3];
    sKey_new[30] = sKey[4];
    sKey_new[31] = sKey[5];
}


static void KeyExpansion_S2RK(uint8_t *sKey, int round)
{
    RoundKey[round * 32 +0] = sKey[6] ^ sKey[12] ^ sKey[18] ^ sKey[24];
    RoundKey[round * 32 +1] = sKey[4] ^ sKey[10] ^ sKey[16] ^ sKey[30];
    RoundKey[round * 32 +2] = sKey[2] ^ sKey[8] ^ sKey[22] ^ sKey[28];
    RoundKey[round * 32 +3] = sKey[0] ^ sKey[14] ^ sKey[20] ^ sKey[26];

    RoundKey[round * 32 +4] = sKey[12] ^ sKey[24];
    RoundKey[round * 32 +5] = sKey[4] ^ sKey[16];
    RoundKey[round * 32 +6] = sKey[8] ^ sKey[28];
    RoundKey[round * 32 +7] = sKey[0] ^ sKey[20];

    RoundKey[round * 32 +8] = sKey[6] ^ sKey[24];
    RoundKey[round * 32 +9] = sKey[16] ^ sKey[30];
    RoundKey[round * 32 +10] = sKey[8] ^ sKey[22];
    RoundKey[round * 32 +11] = sKey[0] ^ sKey[14];

    RoundKey[round * 32 +12] = sKey[24];
    RoundKey[round * 32 +13] = sKey[16];
    RoundKey[round * 32 +14] = sKey[8];
    RoundKey[round * 32 +15] = sKey[0];

    RoundKey[round * 32 +16] = sKey[7] ^ sKey[13] ^ sKey[19] ^ sKey[25];
    RoundKey[round * 32 +17] = sKey[5] ^ sKey[11] ^ sKey[17] ^ sKey[31];
    RoundKey[round * 32 +18] = sKey[3] ^ sKey[9] ^ sKey[23] ^ sKey[29];
    RoundKey[round * 32 +19] = sKey[1] ^ sKey[15] ^ sKey[21] ^ sKey[27];

    RoundKey[round * 32 +20] = sKey[13] ^ sKey[25];
    RoundKey[round * 32 +21] = sKey[5] ^ sKey[17];
    RoundKey[round * 32 +22] = sKey[9] ^ sKey[29];
    RoundKey[round * 32 +23] = sKey[1] ^ sKey[21];

    RoundKey[round * 32 +24] = sKey[7] ^ sKey[25];
    RoundKey[round * 32 +25] = sKey[17] ^ sKey[31];
    RoundKey[round * 32 +26] = sKey[9] ^ sKey[23];
    RoundKey[round * 32 +27] = sKey[1] ^ sKey[15];

    RoundKey[round * 32 +28] = sKey[25];
    RoundKey[round * 32 +29] = sKey[17];
    RoundKey[round * 32 +30] = sKey[9];
    RoundKey[round * 32 +31] = sKey[1];
}


void subByte16(uint8_t *RoundText){
    for(int i=0;i<16;i++)
        RoundText[i]=sbox[RoundText[i]];
}
void InvSubByte16(uint8_t *RoundText){
    for(int i=0;i<16;i++)
        RoundText[i]=rsbox[RoundText[i]];
}
void ShiftRow16(uint8_t *RoundText) {
    uint8_t t;
    //row1
    t=RoundText[1]; RoundText[1]=RoundText[5]; RoundText[5]=RoundText[9]; RoundText[9]=RoundText[13]; RoundText[13]=t;
    //row2
    t=RoundText[2];RoundText[2]=RoundText[10];RoundText[10]=t;
    t=RoundText[6];RoundText[6]=RoundText[14];RoundText[14]=t;
    //row3
    t=RoundText[15];RoundText[15]=RoundText[11];RoundText[11]=RoundText[7]; RoundText[7]=RoundText[3]; RoundText[3]=t;
}

void InvShiftRow16(uint8_t *RoundText){
    uint8_t t;
    //row1
    t=RoundText[13]; RoundText[13]=RoundText[9];RoundText[9]=RoundText[5]; RoundText[5]=RoundText[1]; RoundText[1]=t;
    //row2
    t=RoundText[2],RoundText[2]=RoundText[10];RoundText[10]=t;
    t=RoundText[6];RoundText[6]=RoundText[14];RoundText[14]=t;
    //row3
    t=RoundText[3]; RoundText[3]=RoundText[7];RoundText[7]=RoundText[11]; RoundText[11]=RoundText[15]; RoundText[15]=t;
}
void MixColumn16(uint8_t* RoundText){
    uint8_t temp[4];
    for(int i=0;i<4;i++){
        temp[0]=mul2(RoundText[4*i])^mul3(RoundText[1+4*i])^RoundText[2+4*i]^RoundText[3+4*i];
        temp[1]=RoundText[4*i]^mul2(RoundText[1+4*i])^mul3(RoundText[2+4*i])^RoundText[3+4*i];
        temp[2]=RoundText[4*i]^RoundText[1+4*i]^mul2(RoundText[2+4*i])^mul3(RoundText[3+4*i]);
        temp[3]=mul3(RoundText[4*i])^RoundText[1+4*i]^RoundText[2+4*i]^mul2(RoundText[3+4*i]);
        RoundText[4*i]=temp[0];
        RoundText[1+4*i]=temp[1];
        RoundText[2+4*i]=temp[2];
        RoundText[3+4*i]=temp[3];
    }
}

void InvMixColumn16(uint8_t* RoundText) {
    uint8_t temp[4];
    for(int i=0;i<4;i++){
        temp[0]=mulE(RoundText[4*i])^mulB(RoundText[1+4*i])^mulD(RoundText[2+4*i])^mul9(RoundText[3+4*i]);
        temp[1]=mul9(RoundText[4*i])^mulE(RoundText[1+4*i])^mulB(RoundText[2+4*i])^mulD(RoundText[3+4*i]);
        temp[2]=mulD(RoundText[4*i])^mul9(RoundText[1+4*i])^mulE(RoundText[2+4*i])^mulB(RoundText[3+4*i]);
        temp[3]=mulB(RoundText[4*i])^mulD(RoundText[1+4*i])^mul9(RoundText[2+4*i])^mulE(RoundText[3+4*i]);
        RoundText[4*i]=temp[0];
        RoundText[1+4*i]=temp[1];
        RoundText[2+4*i]=temp[2];
        RoundText[3+4*i]=temp[3];
    }
}
void AddRoundKey16(uint8_t* RoundText,int round){
    for(int i=0;i<16;i++)
        RoundText[i]^=RoundKey[round*16+i];
}







void aes_256_preimage_attack() {
    int rounds = 10;
    int frounds = 5;
    int brounds = rounds - frounds;
    int state_start_round = 4;
    int skey_start_round = 3;
    int skey_round = 6;
    int blue_index[19] = {0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 16, 17, 18, 20, 24, 25, 26, 30, 31};
    int state_blue_index[8] = {1,2,6,7,8,11,12,13};
    int state_red_index[8] = {0,3,4,5,9,10,14,15};
    int blue_number = 19;
    int MatchNum = 0;
    int SucceedNum = 0;
    vector<vector<uint8_t>> PreImage;

    clock_t start_time = clock();
    clock_t end_time = clock();

    uint8_t sKey[32] = {0};

    vector< vector<uint8_t> > BlueInitState;
    
    //int FALG = 1;
    /*
    printf("Begin Data Collection\n");
    for(uint32_t i = 0; i < 0xffffffff; i++){
     
        sKey[2] = take8(i,0);
        sKey[4] = take8(i,1);
        sKey[6] = take8(i,2);
        sKey[20] = take8(i,3);

        sKey[30] = sKey[4]; //a11
        sKey[18] = sKey[6]; //a9
        sKey[12] = mulE5(mulB(sKey[4]) ^ mulD(sKey[28]) ^ mul9(sKey[20])); //a15
        sKey[10] = sKey[30]; //a10
        sKey[9] = rsbox[rsbox[rsbox[sKey[12] ^ sKey[18]] ^ sKey[11]] ^ sKey[10]]; //a13
        sKey[8] = rsbox[sKey[9]]; //a2
        sKey[7] = sbox[sKey[6]]; //a7
        sKey[1] = rsbox[sKey[2]]; //a1
        sKey[0] = rsbox[sKey[1]]; //a5
        sKey[31] = sbox[sKey[30]]; //a6
        sKey[26] = sKey[0] ^ sbox[sKey[7]] ^ sKey[14] ^ sKey[20]; //a12
        sKey[25] = rsbox[rsbox[rsbox[sKey[2] ^ sKey[8] ^ sbox[sKey[21]] ^ sKey[22] ^ sKey[28]] ^ sKey[27]] ^ sKey[26]]; //a14
        sKey[24] = rsbox[sKey[25]]; //a4
        sKey[16] = mul4F(mulD(sKey[24] ^ sbox[sKey[31]] ^ sKey[12]) ^ mulE(sKey[28] ^ sKey[8] ^ sbox[sKey[15]]) ^ mulB(sKey[20] ^ sKey[0] ^ sbox[sKey[7]])) ^ sbox[sKey[23]] ^ sKey[4]; //a17
        sKey[17] = sbox[sKey[16]];  //a3

        uint8_t a8  = sKey[12] ^ sKey[18] ^ sKey[24] ^ sbox[sKey[31]] ^ sKey[6];
        uint8_t a16 = mul9(sKey[18] ^ sKey[12]) ^ mulE(sKey[4] ^ sKey[10]) ^ mulB(sKey[28] ^ sKey[2]) ^ mulD(sKey[20] ^ sKey[26]);
        uint8_t a18 = mulB(sKey[18] ^ sKey[24] ^ sbox[sKey[31]] ^ sKey[6] ^ sbox[sKey[5]] ^ sKey[12]) ^ mulD(sKey[16] ^ sbox[sKey[23]] ^ sKey[30] ^ sbox[sKey[29]] ^ sKey[4] ^ sKey[10]) ^ mul9(sKey[22] ^ sbox[sKey[21]] ^ sKey[28] ^ sKey[2] ^ sKey[8] ^ sbox[sKey[15]]) ^ mulE(sKey[20] ^ sKey[26] ^ sKey[0] ^ sbox[sKey[7]] ^ sKey[14] ^ sbox[sKey[13]]);

        if ((a8 == 0) && (a16 ==0) && (a18 == 0)){
            vector<uint8_t> ttmp;
            for(int j = 0; j < blue_number; j++){
                ttmp.push_back(sKey[blue_index[j]]);
            }
            BlueInitState.push_back(ttmp);
        }
    }
    printf("Data Size = %d\n", BlueInitState.size());
    end_time = clock();
    cout << "Finish Data Collection, time is: " <<(double)(end_time - start_time) / CLOCKS_PER_SEC << "s" << endl;
    */
   
   BlueInitState = {{0xb7, 0xa9, 0xd3, 0x19, 0x2c, 0x71, 0x50, 0x53, 0x19, 0x24, 0x21, 0xfd, 0x2c, 0x0, 0x6c, 0x50, 0x14, 0x19, 0xd4},
                    {0x7b, 0x21, 0xfd, 0xc4, 0x55, 0xfc, 0x4c, 0x29, 0xc4, 0x8a, 0x5, 0x6b, 0x55, 0x0, 0x16, 0x47, 0xcb, 0xc4, 0x1c},
                    {0x23, 0x26, 0xf7, 0x10, 0x20, 0xb7, 0x84, 0x5f, 0x10, 0x2b, 0x64, 0x43, 0x20, 0x1, 0x5f, 0xcf, 0x8b, 0x10, 0xca},
                    {0xdf, 0x9e, 0xb, 0x73, 0x4c, 0x29, 0xc0, 0xba, 0x73, 0xbc, 0xdf, 0x9e, 0x4c, 0x2, 0xcf, 0x8a, 0x78, 0x73, 0x8f},
                    {0x85, 0x97, 0x88, 0xd4, 0x20, 0xb7, 0xfd, 0x54, 0xd4, 0x28, 0x7d, 0xff, 0x20, 0x6, 0x7a, 0xda, 0x2a, 0xd4, 0x48},
                    {0xcc, 0x4b, 0xb3, 0x0, 0xc3, 0x2e, 0xc3, 0x2e, 0x0, 0x5, 0x97, 0x88, 0xc3, 0x6, 0xfe, 0xbb, 0xfb, 0x0, 0x63},
                    {0xa, 0x67, 0x85, 0xa9, 0x6a, 0x2, 0xf0, 0x8c, 0xa9, 0x10, 0x0, 0x63, 0x6a, 0x7, 0x76, 0x38, 0x7a, 0xa9, 0xd3},
                    {0x1e, 0x72, 0x40, 0x2f, 0xa0, 0xe0, 0xe3, 0x11, 0x2f, 0x8a, 0xcb, 0x1f, 0xa0, 0x7, 0xd3, 0x66, 0xf8, 0x2f, 0x15},
                    {0x76, 0x38, 0x7, 0xdb, 0x98, 0x46, 0xb5, 0xd5, 0xdb, 0x77, 0xf9, 0x99, 0x98, 0x8, 0x21, 0xfd, 0x24, 0xdb, 0xb9},
                    {0x2f, 0x15, 0x59, 0xd9, 0xae, 0xe4, 0xec, 0xce, 0xd9, 0xcd, 0x8e, 0x19, 0xae, 0x8, 0x5b, 0x39, 0x4e, 0xd9, 0x35},
                    {0x59, 0xcb, 0x1f, 0x3b, 0x6, 0x6f, 0xd6, 0xf6, 0x3b, 0x48, 0xdc, 0x86, 0x6, 0xb, 0xd0, 0x70, 0xfa, 0x3b, 0xe2},
                    {0xdc, 0x86, 0x44, 0x35, 0x49, 0x3b, 0x3a, 0x80, 0x35, 0xca, 0x48, 0x52, 0x49, 0xc, 0x5a, 0xbe, 0x32, 0x35, 0x96},
                    {0x4, 0xf2, 0x89, 0x58, 0x97, 0x88, 0xbe, 0xae, 0x58, 0xda, 0x19, 0xd4, 0x97, 0xe, 0xd8, 0x61, 0xce, 0x58, 0x6a},
                    {0xe8, 0x9b, 0x14, 0x9b, 0xd0, 0x70, 0xa5, 0x6, 0x9b, 0xd8, 0x5a, 0xbe, 0xd0, 0xe, 0x22, 0x93, 0xb7, 0x9b, 0x14},
                    {0xd7, 0xe, 0xab, 0x6a, 0x2a, 0xe5, 0x92, 0x4f, 0x6a, 0x1e, 0xc1, 0x78, 0x2a, 0xf, 0x69, 0xf9, 0x1, 0x6a, 0x2},
                    {0x28, 0x34, 0x18, 0xee, 0x99, 0xee, 0x88, 0xc4, 0xee, 0x3e, 0x5b, 0x39, 0x99, 0xf, 0xa, 0x67, 0xf, 0xee, 0x28},
                    {0x82, 0x13, 0x7d, 0x98, 0xe5, 0xd9, 0x8c, 0x64, 0x98, 0xb3, 0xfa, 0x2d, 0xe5, 0xf, 0xe9, 0x1e, 0xb8, 0x98, 0x46},
                    {0x1d, 0xa4, 0x49, 0x98, 0xf2, 0x89, 0x1f, 0xc0, 0x98, 0x2e, 0xe, 0xab, 0xf2, 0x10, 0x74, 0x92, 0xaa, 0x98, 0x46},
                    {0x49, 0x3b, 0xe2, 0x6, 0xee, 0x28, 0x0, 0x63, 0x6, 0xce, 0xe9, 0x1e, 0xee, 0x12, 0x66, 0x33, 0x6f, 0x6, 0x6f},
                    {0x18, 0xad, 0x95, 0xd8, 0x6c, 0x50, 0xd5, 0x3, 0xd8, 0xb, 0xfd, 0x54, 0x6c, 0x13, 0xe4, 0x69, 0x58, 0xd8, 0x61},
                    {0x4a, 0xd6, 0xf6, 0x2d, 0x3f, 0x75, 0x38, 0x7, 0x2d, 0x2b, 0xbf, 0x8, 0x3f, 0x15, 0x4a, 0xd6, 0xc2, 0x2d, 0xd8},
                    {0xb0, 0xe7, 0x94, 0x3b, 0xb5, 0xd5, 0xcd, 0xbd, 0x3b, 0x59, 0xef, 0xdf, 0xb5, 0x15, 0xc1, 0x78, 0xa6, 0x3b, 0xe2},
                    {0xf2, 0x89, 0xa7, 0x20, 0xce, 0x8b, 0xd4, 0x48, 0x20, 0xc7, 0x54, 0x20, 0xce, 0x15, 0x6e, 0x9f, 0xda, 0x20, 0xb7},
                    {0x4, 0xf2, 0x89, 0xab, 0xce, 0x8b, 0x5a, 0xbe, 0xab, 0xb1, 0x5e, 0x58, 0xce, 0x15, 0x1b, 0xaf, 0x2c, 0xab, 0x62},
                    {0xb4, 0x8d, 0x5d, 0xae, 0x54, 0x20, 0xfd, 0x54, 0xae, 0x80, 0xa9, 0xd3, 0x54, 0x17, 0xe9, 0x1e, 0x14, 0xae, 0xe4},
                    {0x8a, 0x7e, 0xf3, 0x6f, 0x96, 0x90, 0xe5, 0xd9, 0x6f, 0x38, 0x5a, 0xbe, 0x96, 0x17, 0xfa, 0x2d, 0xfd, 0x6f, 0xa8},
                    {0xa2, 0x3a, 0x80, 0x6d, 0xc0, 0xba, 0xc, 0xfe, 0x6d, 0x82, 0x17, 0xf0, 0xc0, 0x17, 0x69, 0xf9, 0x41, 0x6d, 0x3c},
                    {0x36, 0x5, 0x6b, 0xfd, 0x97, 0x88, 0x1c, 0x9c, 0xfd, 0x60, 0x1f, 0xc0, 0x97, 0x1b, 0x40, 0x9, 0xe9, 0xfd, 0x54},
                    {0x2a, 0xe5, 0xd9, 0x45, 0x63, 0xfb, 0xce, 0x8b, 0x45, 0x6, 0xd8, 0x61, 0x63, 0x1d, 0x99, 0xee, 0x38, 0x45, 0x6e},
                    {0x32, 0x23, 0x26, 0x3, 0x9a, 0xb8, 0xa9, 0xd3, 0x3, 0x79, 0x9a, 0xb8, 0x9a, 0x1d, 0x58, 0x6a, 0x43, 0x3, 0x7b},
                    {0x14, 0xfa, 0x2d, 0xb0, 0x67, 0x85, 0x4c, 0x29, 0xb0, 0xac, 0xe1, 0xf8, 0x67, 0x1e, 0x38, 0x7, 0x9d, 0xb0, 0xe7},
                    {0x33, 0xc3, 0x2e, 0x7a, 0x21, 0xfd, 0xfa, 0x2d, 0x7a, 0xa1, 0xfa, 0x2d, 0x21, 0x1f, 0xf6, 0x42, 0x78, 0x7a, 0xda},
                    {0xa6, 0x24, 0x36, 0x85, 0xa2, 0x3a, 0x6c, 0x50, 0x85, 0xe0, 0xb2, 0x37, 0xa2, 0x1f, 0x68, 0x45, 0x39, 0x85, 0x97},
                    {0xc7, 0xc6, 0xb4, 0x7b, 0x18, 0xad, 0x8c, 0x64, 0x7b, 0xdd, 0x78, 0xbc, 0x18, 0x21, 0x20, 0xb7, 0x73, 0x7b, 0x21},
                    {0xf3, 0xd, 0xd7, 0x2c, 0xcb, 0x1f, 0xde, 0x1d, 0x2c, 0xd7, 0x35, 0x96, 0xcb, 0x22, 0x74, 0x92, 0x11, 0x2c, 0x71},
                    {0xd2, 0xb5, 0xd5, 0x25, 0x82, 0x13, 0x80, 0xcd, 0x25, 0xd8, 0x50, 0x53, 0x82, 0x23, 0xad, 0x95, 0x8c, 0x25, 0x3f},
                    {0xd3, 0x66, 0x33, 0x71, 0x43, 0x1a, 0x4d, 0xe3, 0x71, 0x33, 0xc, 0xfe, 0x43, 0x24, 0x39, 0x12, 0x55, 0x71, 0xa3},
                    {0xae, 0xe4, 0x69, 0x75, 0x85, 0x97, 0x4f, 0x84, 0x75, 0x5c, 0xf2, 0x89, 0x85, 0x24, 0x2, 0x77, 0x2, 0x75, 0x9d},
                    {0xcb, 0x1f, 0xc0, 0x13, 0xe6, 0x8e, 0x32, 0x23, 0x13, 0x76, 0x92, 0x4f, 0xe6, 0x24, 0x89, 0xa7, 0xf6, 0x13, 0x7d},
                    {0xdc, 0x86, 0x44, 0x4c, 0xa6, 0x24, 0x39, 0x12, 0x4c, 0x2e, 0xd2, 0xb5, 0xa6, 0x26, 0x8b, 0x3d, 0xcc, 0x4c, 0x29},
                    {0x0, 0x63, 0xfb, 0x93, 0x1f, 0xc0, 0xa8, 0xc2, 0x93, 0x30, 0x3b, 0xe2, 0x1f, 0x2a, 0xb6, 0x4e, 0x90, 0x93, 0xdc},
                    {0xe, 0xab, 0x62, 0x36, 0x2d, 0xd8, 0x20, 0xb7, 0x36, 0x94, 0x58, 0x6a, 0x2d, 0x2b, 0xff, 0x16, 0x44, 0x36, 0x5},
                    {0x27, 0xcc, 0x4b, 0x1a, 0x67, 0x85, 0x2, 0x77, 0x1a, 0xf9, 0xa0, 0xe0, 0x67, 0x2c, 0xc3, 0x2e, 0x9c, 0x1a, 0xa2},
                    {0xbf, 0x8, 0x30, 0x2d, 0x9e, 0xb, 0xb9, 0x56, 0x2d, 0x83, 0x69, 0xf9, 0x9e, 0x2c, 0xe2, 0x98, 0xb8, 0x2d, 0xd8},
                    {0x33, 0xc3, 0x2e, 0x70, 0xf9, 0x99, 0x37, 0x9a, 0x70, 0x62, 0x7, 0xc5, 0xf9, 0x2c, 0xb3, 0x6d, 0xf1, 0x70, 0x51},
                    {0x55, 0xfc, 0xb0, 0x21, 0xb6, 0x4e, 0xd2, 0xb5, 0x21, 0xbe, 0x93, 0xdc, 0xb6, 0x2d, 0xea, 0x87, 0x57, 0x21, 0xfd},
                    {0xd4, 0x48, 0x52, 0x47, 0xbf, 0x8, 0x2a, 0xe5, 0x47, 0x94, 0xe7, 0x94, 0xbf, 0x2d, 0x74, 0x92, 0xc9, 0x47, 0xa0},
                    {0x2a, 0xe5, 0xd9, 0x6a, 0xa9, 0xd3, 0x70, 0x51, 0x6a, 0x2e, 0xf2, 0x89, 0xa9, 0x2f, 0x59, 0xcb, 0x63, 0x6a, 0x2},
                    {0xb1, 0xc8, 0xe8, 0x31, 0x37, 0x9a, 0xf0, 0x8c, 0x31, 0x87, 0xee, 0x28, 0x37, 0x30, 0x41, 0x83, 0x39, 0x31, 0xc7},
                    {0x7b, 0x21, 0xfd, 0xd7, 0x5b, 0x39, 0x19, 0xd4, 0xd7, 0xe2, 0xe5, 0xd9, 0x5b, 0x30, 0x49, 0x3b, 0x59, 0xd7, 0xe},
                    {0xaa, 0xac, 0x91, 0xf1, 0x92, 0x4f, 0xe0, 0xe1, 0xf1, 0xee, 0xce, 0x8b, 0x92, 0x31, 0xdc, 0x86, 0x1f, 0xf1, 0xa1},
                    {0xb, 0x2b, 0xf1, 0xe3, 0x87, 0x17, 0x65, 0x4d, 0xe3, 0x7c, 0xc0, 0xba, 0x87, 0x32, 0xfe, 0xbb, 0xc9, 0xe3, 0x11},
                    {0x33, 0xc3, 0x2e, 0xeb, 0xc7, 0xc6, 0xf3, 0xd, 0xeb, 0x2e, 0xf4, 0xbf, 0xc7, 0x33, 0x30, 0x4, 0xb4, 0xeb, 0xe9},
                    {0x5b, 0x39, 0x12, 0x78, 0x98, 0x46, 0x2e, 0x31, 0x78, 0xa8, 0xed, 0x55, 0x98, 0x34, 0xcd, 0xbd, 0x35, 0x78, 0xbc},
                    {0x58, 0x6a, 0x2, 0xb5, 0x83, 0xec, 0xaf, 0x79, 0xb5, 0xa2, 0xbb, 0xea, 0x83, 0x36, 0xa1, 0x32, 0xa0, 0xb5, 0xd5},
                    {0x5c, 0x4a, 0xd6, 0xad, 0xc0, 0xba, 0x4a, 0xd6, 0xad, 0xd2, 0xb9, 0x56, 0xc0, 0x38, 0xf8, 0x41, 0x90, 0xad, 0x95},
                    {0x9f, 0xdb, 0xb9, 0x28, 0x68, 0x45, 0xba, 0xf4, 0x28, 0xac, 0x4d, 0xe3, 0x68, 0x3a, 0xb4, 0x8d, 0xcb, 0x28, 0x34},
                    {0xda, 0x57, 0x5b, 0x2c, 0x3a, 0x80, 0x72, 0x40, 0x2c, 0x4f, 0xe9, 0x1e, 0x3a, 0x3b, 0xec, 0xce, 0x2c, 0x2c, 0x71},
                    {0x42, 0x2c, 0x71, 0xd8, 0x44, 0x1b, 0x8c, 0x64, 0xd8, 0xbe, 0x1b, 0xaf, 0x44, 0x3c, 0x51, 0xd1, 0xd1, 0xd8, 0x61},
                    {0x46, 0x5a, 0xbe, 0x60, 0xa1, 0x32, 0xae, 0xe4, 0x60, 0xdd, 0x88, 0xc4, 0xa1, 0x3c, 0xad, 0x95, 0x59, 0x60, 0xd0},
                    {0x16, 0x47, 0xa0, 0xaa, 0x69, 0xf9, 0x7f, 0xd2, 0xaa, 0xd3, 0xfe, 0xbb, 0x69, 0x3f, 0x42, 0x2c, 0xb0, 0xaa, 0xac},
                    {0xb0, 0xe7, 0x94, 0x7, 0x9d, 0x5e, 0xbf, 0x8, 0x7, 0x25, 0x89, 0xa7, 0x9d, 0x3f, 0x83, 0xec, 0xd7, 0x7, 0xc5},
                    {0xab, 0x62, 0xaa, 0xcf, 0x98, 0x46, 0x73, 0x8f, 0xcf, 0xd5, 0x46, 0x5a, 0x98, 0x44, 0xab, 0x62, 0xb5, 0xcf, 0x8a},
                    {0x1d, 0xa4, 0x49, 0x85, 0xba, 0xf4, 0x5a, 0xbe, 0x85, 0x1b, 0x8e, 0x19, 0xba, 0x44, 0x93, 0xdc, 0xe6, 0x85, 0x97},
                    {0x16, 0x47, 0xa0, 0x6c, 0xdd, 0xc1, 0x68, 0x45, 0x6c, 0x28, 0x23, 0x26, 0xdd, 0x44, 0x7b, 0x21, 0x2a, 0x6c, 0x50},
                    {0x12, 0xc9, 0xdd, 0x46, 0x4d, 0xe3, 0xb3, 0x6d, 0x46, 0x1a, 0x55, 0xfc, 0x4d, 0x46, 0xa4, 0x49, 0x45, 0x46, 0x5a},
                    {0x70, 0x51, 0xd1, 0x1c, 0x55, 0xfc, 0x33, 0xc3, 0x1c, 0x73, 0xf3, 0xd, 0x55, 0x46, 0xad, 0x95, 0x86, 0x1c, 0x9c},
                    {0x6b, 0x7f, 0xd2, 0xc5, 0x67, 0x85, 0xea, 0x87, 0xc5, 0xb2, 0xc6, 0xb4, 0x67, 0x46, 0x96, 0x90, 0xba, 0xc5, 0xa6},
                    {0x4e, 0x2f, 0x15, 0x22, 0x8f, 0x73, 0x29, 0xa5, 0x22, 0x8a, 0xb7, 0xa9, 0x8f, 0x46, 0x56, 0xb1, 0x87, 0x22, 0x93},
                    {0xe7, 0x94, 0x22, 0x6e, 0x46, 0x5a, 0xc7, 0xc6, 0x6e, 0x1d, 0xf4, 0xbf, 0x46, 0x47, 0xc6, 0xb4, 0x1e, 0x6e, 0x9f},
                    {0x8f, 0x73, 0x8f, 0xc1, 0x49, 0x3b, 0x81, 0xc, 0xc1, 0xd4, 0xad, 0x95, 0x49, 0x48, 0x68, 0x45, 0x25, 0xc1, 0x78},
                    {0x6c, 0x50, 0x53, 0x75, 0xc3, 0x2e, 0xbc, 0x65, 0x75, 0x6, 0x93, 0xdc, 0xc3, 0x48, 0x58, 0x6a, 0x15, 0x75, 0x9d},
                    {0xe1, 0xf8, 0x41, 0xb4, 0x94, 0x22, 0xcc, 0x4b, 0xb4, 0x32, 0x66, 0x33, 0x94, 0x49, 0x6f, 0xa8, 0x3b, 0xb4, 0x8d},
                    {0x17, 0xf0, 0x8c, 0x1f, 0xa1, 0x32, 0x12, 0xc9, 0x1f, 0x9e, 0x40, 0x9, 0xa1, 0x4a, 0x24, 0x36, 0x7e, 0x1f, 0xc0},
                    {0xff, 0x16, 0x47, 0x73, 0xf7, 0x68, 0xe0, 0xe1, 0x73, 0xd0, 0x1, 0x7c, 0xf7, 0x4a, 0xa3, 0xa, 0xf0, 0x73, 0x8f},
                    {0x52, 0x0, 0x63, 0x5d, 0xea, 0x87, 0x7e, 0xf3, 0x5d, 0x7, 0xbc, 0x65, 0xea, 0x4d, 0x2e, 0x31, 0x8, 0x5d, 0x4c},
                    {0xc7, 0xc6, 0xb4, 0xe7, 0xb3, 0x6d, 0x5a, 0xbe, 0xe7, 0x51, 0xa9, 0xd3, 0xb3, 0x4e, 0x73, 0x8f, 0xb5, 0xe7, 0x94},
                    {0x92, 0x4f, 0x84, 0x56, 0x13, 0x7d, 0xb2, 0x37, 0x56, 0xa0, 0xbf, 0x8, 0x13, 0x50, 0x68, 0x45, 0x3d, 0x56, 0xb1},
                    {0xaa, 0xac, 0x91, 0x3c, 0xc8, 0xe8, 0xaf, 0x79, 0x3c, 0x3b, 0xe2, 0x98, 0xc8, 0x50, 0xd2, 0xb5, 0x61, 0x3c, 0xeb},
                    {0xaa, 0xac, 0x91, 0x88, 0xe7, 0x94, 0x36, 0x5, 0x88, 0x65, 0xfa, 0x2d, 0xe7, 0x51, 0x79, 0xb6, 0xd9, 0x88, 0xc4},
                    {0x9b, 0x14, 0xfa, 0x31, 0x74, 0x92, 0x8b, 0x3d, 0x31, 0xd4, 0xe, 0xab, 0x74, 0x52, 0x12, 0xc9, 0x86, 0x31, 0xc7},
                    {0x1d, 0xa4, 0x49, 0x69, 0x5a, 0xbe, 0xe6, 0x8e, 0x69, 0x8b, 0x2c, 0x71, 0x5a, 0x53, 0x12, 0xc9, 0xe0, 0x69, 0xf9},
                    {0xa4, 0x49, 0x3b, 0x6e, 0x97, 0x88, 0x1c, 0x9c, 0x6e, 0x3, 0x41, 0x83, 0x97, 0x53, 0xd8, 0x61, 0x33, 0x6e, 0x9f},
                    {0xe3, 0x11, 0x82, 0xb7, 0xc0, 0xba, 0xd8, 0x61, 0xb7, 0xc2, 0x80, 0xcd, 0xc0, 0x53, 0x11, 0x82, 0x44, 0xb7, 0xa9},
                    {0x40, 0x9, 0x1, 0x5a, 0xfa, 0x2d, 0xab, 0x62, 0x5a, 0x9e, 0x21, 0xfd, 0xfa, 0x53, 0x30, 0x4, 0xcb, 0x5a, 0xbe},
                    {0xff, 0x16, 0x47, 0x36, 0x2, 0x77, 0x41, 0x83, 0x36, 0x59, 0x6d, 0x3c, 0x2, 0x54, 0x32, 0x23, 0x5e, 0x36, 0x5},
                    {0xc3, 0x2e, 0x31, 0xc4, 0x86, 0x44, 0x14, 0xfa, 0xc4, 0xf4, 0xa0, 0xe0, 0x86, 0x54, 0x68, 0x45, 0x8c, 0xc4, 0x1c},
                    {0xa6, 0x24, 0x36, 0xe2, 0x16, 0x47, 0x86, 0x44, 0xe2, 0xf8, 0x8b, 0x3d, 0x16, 0x55, 0xbe, 0xae, 0x53, 0xe2, 0x98},
                    {0x8c, 0x64, 0x43, 0x92, 0x49, 0x3b, 0xa4, 0x49, 0x92, 0x2f, 0x43, 0x1a, 0x49, 0x56, 0xab, 0x62, 0x38, 0x92, 0x4f},
                    {0xce, 0x8b, 0x3d, 0x28, 0x51, 0xd1, 0xaf, 0x79, 0x28, 0x7a, 0xd6, 0xf6, 0x51, 0x57, 0x62, 0xaa, 0xa7, 0x28, 0x34},
                    {0xee, 0x28, 0x34, 0x8b, 0xc1, 0x78, 0xae, 0xe4, 0x8b, 0x87, 0x42, 0x2c, 0xc1, 0x57, 0xa0, 0xe0, 0x5, 0x8b, 0x3d},
                    {0x5c, 0x4a, 0xd6, 0xd9, 0x92, 0x4f, 0xd, 0xd7, 0xd9, 0x39, 0x1b, 0xaf, 0x92, 0x59, 0xaf, 0x79, 0x81, 0xd9, 0x35},
                    {0xe8, 0x9b, 0x14, 0x51, 0xe9, 0x1e, 0x6b, 0x7f, 0x51, 0x27, 0x84, 0x5f, 0xe9, 0x5a, 0x19, 0xd4, 0xc0, 0x51, 0xd1},
                    {0x8a, 0x7e, 0xf3, 0x46, 0xae, 0xe4, 0x5e, 0x58, 0x46, 0xd, 0x48, 0x52, 0xae, 0x5c, 0xb3, 0x6d, 0xbf, 0x46, 0x5a},
                    {0x6e, 0x9f, 0xdb, 0xe3, 0xc0, 0xba, 0xfb, 0xf, 0xe3, 0x25, 0xb9, 0x56, 0xc0, 0x5c, 0xa7, 0x5c, 0xc6, 0xe3, 0x11},
                    {0xd8, 0x61, 0xef, 0x24, 0xe6, 0x8e, 0xcf, 0x8a, 0x24, 0x48, 0x7e, 0xf3, 0xe6, 0x5c, 0x4d, 0xe3, 0x9d, 0x24, 0x36},
                    {0xd, 0xd7, 0xe, 0x97, 0xfe, 0xbb, 0x40, 0x9, 0x97, 0x9e, 0x58, 0x6a, 0xfe, 0x5d, 0x5a, 0xbe, 0xba, 0x97, 0x88},
                    {0xcd, 0xbd, 0x7a, 0xdc, 0x18, 0xad, 0x2b, 0xf1, 0xdc, 0xe, 0x3f, 0x75, 0x18, 0x5f, 0x4a, 0xd6, 0x7, 0xdc, 0x86},
                    {0xd, 0xd7, 0xe, 0x69, 0x95, 0x2a, 0x4a, 0xd6, 0x69, 0x2c, 0xda, 0x57, 0x95, 0x60, 0xb5, 0xd5, 0x88, 0x69, 0xf9},
                    {0xba, 0xf4, 0xbf, 0x95, 0xc7, 0xc6, 0x5d, 0x4c, 0x95, 0x8a, 0x7a, 0xda, 0xc7, 0x60, 0x6f, 0xa8, 0x6e, 0x95, 0x2a},
                    {0x46, 0x5a, 0xbe, 0x2f, 0xf6, 0x42, 0x52, 0x0, 0x2f, 0x53, 0x2a, 0xe5, 0xf6, 0x60, 0xa, 0x67, 0xa, 0x2f, 0x15},
                    {0xa9, 0xd3, 0x66, 0x12, 0x50, 0x53, 0xe4, 0x69, 0x12, 0x4e, 0x82, 0x13, 0x50, 0x62, 0x93, 0xdc, 0x26, 0x12, 0xc9},
                    {0x6a, 0x2, 0x77, 0xef, 0x51, 0xd1, 0xd0, 0x70, 0xef, 0xb5, 0x9d, 0x5e, 0x51, 0x62, 0x2b, 0xf1, 0x36, 0xef, 0xdf},
                    {0xf8, 0x41, 0x83, 0x18, 0xdc, 0x86, 0xd4, 0x48, 0x18, 0x2a, 0x26, 0xf7, 0xdc, 0x62, 0xbf, 0x8, 0xde, 0x18, 0xad},
                    {0xd0, 0x70, 0x51, 0x8b, 0xe4, 0x69, 0xd6, 0xf6, 0x8b, 0x25, 0x25, 0x3f, 0xe4, 0x62, 0x2, 0x77, 0x4b, 0x8b, 0x3d},
                    {0x18, 0xad, 0x95, 0x68, 0x6f, 0xa8, 0x6f, 0xa8, 0x68, 0xfe, 0xde, 0x1d, 0x6f, 0x63, 0x90, 0x60, 0xb9, 0x68, 0x45},
                    {0x77, 0xf5, 0xe6, 0xc2, 0x1f, 0xc0, 0xba, 0xf4, 0xc2, 0x9, 0x28, 0x34, 0x1f, 0x64, 0x36, 0x5, 0xa9, 0xc2, 0x25},
                    {0x2e, 0x31, 0xc7, 0xb9, 0xf0, 0x8c, 0x42, 0x2c, 0xb9, 0x6b, 0x5c, 0x4a, 0xf0, 0x66, 0xda, 0x57, 0x2c, 0xb9, 0x56},
                    {0x39, 0x12, 0xc9, 0x7e, 0xd7, 0xe, 0x92, 0x4f, 0x7e, 0xf, 0xe1, 0xf8, 0xd7, 0x68, 0x2, 0x77, 0xfa, 0x7e, 0xf3},
                    {0x2c, 0x71, 0xa3, 0x73, 0x73, 0x8f, 0xfc, 0xb0, 0x73, 0xe0, 0x7a, 0xda, 0x73, 0x6a, 0x93, 0xdc, 0x35, 0x73, 0x8f},
                    {0x6b, 0x7f, 0xd2, 0x4b, 0x44, 0x1b, 0x8c, 0x64, 0x4b, 0x40, 0xea, 0x87, 0x44, 0x6b, 0x2d, 0xd8, 0xaf, 0x4b, 0xb3},
                    {0xd3, 0x66, 0x33, 0x5a, 0x27, 0xcc, 0xd1, 0x3e, 0x5a, 0x33, 0xb5, 0xd5, 0x27, 0x6c, 0x9d, 0x5e, 0xf4, 0x5a, 0xbe},
                    {0x3f, 0x75, 0x9d, 0x1, 0x8b, 0x3d, 0x7d, 0xff, 0x1, 0x7, 0xa5, 0x6, 0x8b, 0x6c, 0x17, 0xf0, 0x74, 0x1, 0x7c},
                    {0xbc, 0x65, 0x4d, 0x99, 0x9e, 0xb, 0x12, 0xc9, 0x99, 0x31, 0x90, 0x60, 0x9e, 0x6c, 0x19, 0xd4, 0xfb, 0x99, 0xee},
                    {0x57, 0x5b, 0x39, 0xc3, 0xd1, 0x3e, 0x2e, 0x31, 0xc3, 0x58, 0x5e, 0x58, 0xd1, 0x6c, 0x69, 0xf9, 0x89, 0xc3, 0x2e},
                    {0x26, 0xf7, 0x68, 0xc6, 0x73, 0x8f, 0x1c, 0x9c, 0xc6, 0xe6, 0xc7, 0xc6, 0x73, 0x6d, 0x6b, 0x7f, 0x38, 0xc6, 0xb4},
                    {0x57, 0x5b, 0x39, 0x57, 0x98, 0x46, 0xd6, 0xf6, 0x57, 0x53, 0xb1, 0xc8, 0x98, 0x6d, 0x6a, 0x2, 0x60, 0x57, 0x5b},
                    {0x3c, 0xeb, 0xe9, 0x6f, 0xf8, 0x41, 0x8e, 0x19, 0x6f, 0x7f, 0xe3, 0x11, 0xf8, 0x6d, 0xbd, 0x7a, 0xd2, 0x6f, 0xa8},
                    {0x51, 0xd1, 0x3e, 0xec, 0x70, 0x51, 0x25, 0x3f, 0xec, 0x58, 0xd0, 0x70, 0x70, 0x6e, 0xd3, 0x66, 0xee, 0xec, 0xce},
                    {0xab, 0x62, 0xaa, 0x3e, 0x6c, 0x50, 0xfd, 0x54, 0x3e, 0x2c, 0x0, 0x63, 0x6c, 0x6f, 0x1b, 0xaf, 0x97, 0x3e, 0xb2},
                    {0x91, 0x81, 0xc, 0x11, 0xe7, 0x94, 0xff, 0x16, 0x11, 0x2f, 0x38, 0x7, 0xe7, 0x6f, 0x3c, 0xeb, 0xdc, 0x11, 0x82},
                    {0x46, 0x5a, 0xbe, 0x1b, 0xde, 0x1d, 0xd8, 0x61, 0x1b, 0xd6, 0x3f, 0x75, 0xde, 0x70, 0xaf, 0x79, 0x92, 0x1b, 0xaf},
                    {0x57, 0x5b, 0x39, 0xb4, 0x1b, 0xaf, 0x7c, 0x10, 0xb4, 0x16, 0xaf, 0x79, 0x1b, 0x71, 0x4b, 0xb3, 0x5f, 0xb4, 0x8d},
                    {0x84, 0x5f, 0xcf, 0x7b, 0xc3, 0x2e, 0xff, 0x16, 0x7b, 0x2a, 0x4f, 0x84, 0xc3, 0x72, 0xd7, 0xe, 0xc7, 0x7b, 0x21},
                    {0x40, 0x9, 0x1, 0x15, 0x6, 0x6f, 0x76, 0x38, 0x15, 0xdb, 0xf7, 0x68, 0x6, 0x74, 0x10, 0xca, 0x9c, 0x15, 0x59},
                    {0x6, 0x6f, 0xa8, 0x7f, 0x35, 0x96, 0x98, 0x46, 0x7f, 0x40, 0x4b, 0xb3, 0x35, 0x74, 0xf5, 0xe6, 0xe2, 0x7f, 0xd2},
                    {0x10, 0xca, 0x74, 0xa8, 0xa7, 0x5c, 0xf8, 0x41, 0xa8, 0x6, 0xd2, 0xb5, 0xa7, 0x75, 0x23, 0x26, 0x2f, 0xa8, 0xc2},
                    {0x9b, 0x14, 0xfa, 0xad, 0xc1, 0x78, 0x44, 0x1b, 0xad, 0x34, 0x2e, 0x31, 0xc1, 0x75, 0x1e, 0x72, 0x52, 0xad, 0x95},
                    {0xde, 0x1d, 0xa4, 0xe8, 0xf9, 0x99, 0xc, 0xfe, 0xe8, 0xac, 0xd8, 0x61, 0xf9, 0x75, 0xb8, 0x6c, 0x45, 0xe8, 0x9b},
                    {0xa5, 0x6, 0x6f, 0xec, 0x71, 0xa3, 0xe7, 0x94, 0xec, 0x4c, 0x0, 0x63, 0x71, 0x76, 0xc7, 0xc6, 0xd9, 0xec, 0xce},
                    {0xee, 0x28, 0x34, 0x2b, 0x11, 0x82, 0x21, 0xfd, 0x2b, 0xa4, 0xfd, 0x54, 0x11, 0x79, 0x5, 0x6b, 0x84, 0x2b, 0xf1},
                    {0x71, 0xa3, 0xa, 0xee, 0x1e, 0x72, 0x4c, 0x29, 0xee, 0x73, 0x16, 0x47, 0x1e, 0x79, 0x47, 0xa0, 0x48, 0xee, 0x28},
                    {0xe6, 0x8e, 0x19, 0xe7, 0xe2, 0x98, 0xc1, 0x78, 0xe7, 0xf0, 0xc6, 0xb4, 0xe2, 0x79, 0xd2, 0xb5, 0xd9, 0xe7, 0x94},
                    {0x87, 0x17, 0xf0, 0x97, 0x46, 0x5a, 0x2e, 0x31, 0x97, 0xab, 0x6b, 0x7f, 0x46, 0x7b, 0x6f, 0xa8, 0x42, 0x97, 0x88},
                    {0xbf, 0x8, 0x30, 0x9, 0xc, 0xfe, 0xd3, 0x66, 0x9, 0xc1, 0x4e, 0x2f, 0xc, 0x7c, 0xbd, 0x7a, 0x78, 0x9, 0x1},
                    {0x74, 0x92, 0x4f, 0xc0, 0x94, 0x22, 0x11, 0x82, 0xc0, 0xa7, 0x61, 0xef, 0x94, 0x7c, 0x53, 0xed, 0x9b, 0xc0, 0xba},
                    {0x4f, 0x84, 0x5f, 0x40, 0xf6, 0x42, 0xd7, 0xe, 0x40, 0xe8, 0xac, 0x91, 0xf6, 0x7c, 0xe9, 0x1e, 0x1f, 0x40, 0x9},
                    {0xf0, 0x8c, 0x64, 0x87, 0x5e, 0x58, 0x7b, 0x21, 0x87, 0x9, 0x2d, 0xd8, 0x5e, 0x7d, 0xf9, 0x99, 0xe7, 0x87, 0x17},
                    {0xf9, 0x99, 0xee, 0xbd, 0x72, 0x40, 0x50, 0x53, 0xbd, 0x9f, 0x3e, 0xb2, 0x72, 0x7d, 0x45, 0x6e, 0x8d, 0xbd, 0x7a},
                    {0xf6, 0x42, 0x2c, 0x9b, 0xeb, 0xe9, 0x48, 0x52, 0x9b, 0x11, 0xf4, 0xbf, 0xeb, 0x80, 0xeb, 0xe9, 0x68, 0x9b, 0x14},
                    {0x69, 0xf9, 0x99, 0x99, 0x0, 0x63, 0x5b, 0x39, 0x99, 0x27, 0xaa, 0xac, 0x0, 0x81, 0xf, 0x76, 0x13, 0x99, 0xee},
                    {0xc9, 0xdd, 0xc1, 0x4b, 0x48, 0x52, 0x52, 0x0, 0x4b, 0x50, 0x1d, 0xa4, 0x48, 0x82, 0x3d, 0x27, 0x4b, 0x4b, 0xb3},
                    {0x85, 0x97, 0x88, 0xf5, 0x66, 0x33, 0x7a, 0xda, 0xf5, 0xe6, 0x74, 0x92, 0x66, 0x82, 0x68, 0x45, 0xc4, 0xf5, 0xe6},
                    {0xd1, 0x3e, 0xb2, 0xf0, 0x99, 0xee, 0x57, 0x5b, 0xf0, 0x58, 0x6a, 0x2, 0x99, 0x83, 0x3c, 0xeb, 0x7a, 0xf0, 0x8c},
                    {0xad, 0x95, 0x2a, 0xa8, 0xd0, 0x70, 0xe9, 0x1e, 0xa8, 0x8b, 0x33, 0xc3, 0xd0, 0x83, 0xae, 0xe4, 0x7f, 0xa8, 0xc2},
                    {0x21, 0xfd, 0x54, 0x37, 0xf7, 0x68, 0x9d, 0x5e, 0x37, 0x35, 0xd0, 0x70, 0xf7, 0x83, 0x8d, 0x5d, 0xe7, 0x37, 0x9a},
                    {0x64, 0x43, 0x1a, 0xdc, 0x3b, 0xe2, 0x70, 0x51, 0xdc, 0x35, 0x59, 0xcb, 0x3b, 0x84, 0x71, 0xa3, 0x78, 0xdc, 0x86},
                    {0x76, 0x38, 0x7, 0x98, 0xd1, 0x3e, 0x62, 0xaa, 0x98, 0x7c, 0x5f, 0xcf, 0xd1, 0x85, 0x26, 0xf7, 0x41, 0x98, 0x46},
                    {0xbf, 0x8, 0x30, 0x29, 0x65, 0x4d, 0x2c, 0x71, 0x29, 0x96, 0x60, 0xd0, 0x65, 0x89, 0x90, 0x60, 0xd5, 0x29, 0xa5},
                    {0x6d, 0x3c, 0xeb, 0x1b, 0x73, 0x8f, 0xe1, 0xf8, 0x1b, 0xdd, 0xe1, 0xf8, 0x73, 0x8b, 0xa4, 0x49, 0x95, 0x1b, 0xaf},
                    {0x26, 0xf7, 0x68, 0xae, 0xf8, 0x41, 0x24, 0x36, 0xae, 0x52, 0x2a, 0xe5, 0xf8, 0x8b, 0x3b, 0xe2, 0x2e, 0xae, 0xe4},
                    {0xe2, 0x98, 0x46, 0xdb, 0x2f, 0x15, 0xee, 0x28, 0xdb, 0xb1, 0xeb, 0xe9, 0x2f, 0x8c, 0xe7, 0x94, 0x37, 0xdb, 0xb9},
                    {0xe0, 0xe1, 0xf8, 0xd3, 0x34, 0x18, 0x79, 0xb6, 0xd3, 0x6c, 0xa0, 0xe0, 0x34, 0x8e, 0x5f, 0xcf, 0xc3, 0xd3, 0x66},
                    {0x40, 0x9, 0x1, 0x2d, 0x50, 0x53, 0x90, 0x60, 0x2d, 0x70, 0x30, 0x4, 0x50, 0x8e, 0x11, 0x82, 0x23, 0x2d, 0xd8},
                    {0xf2, 0x89, 0xa7, 0xdc, 0xaa, 0xac, 0x3c, 0xeb, 0xdc, 0x3a, 0xbd, 0x7a, 0xaa, 0x8e, 0x7e, 0xf3, 0xed, 0xdc, 0x86},
                    {0xbb, 0xea, 0x87, 0xc5, 0x5b, 0x39, 0xbe, 0xae, 0xc5, 0xf, 0x6e, 0x9f, 0x5b, 0x90, 0x2b, 0xf1, 0x39, 0xc5, 0xa6},
                    {0x86, 0x44, 0x1b, 0x2, 0x4a, 0xd6, 0x22, 0x93, 0x2, 0xee, 0xa9, 0xd3, 0x4a, 0x91, 0x1b, 0xaf, 0xe1, 0x2, 0x77},
                    {0x59, 0xcb, 0x1f, 0xd2, 0xb9, 0x56, 0xc4, 0x1c, 0xd2, 0xac, 0x10, 0xca, 0xb9, 0x91, 0x79, 0xb6, 0x79, 0xd2, 0xb5},
                    {0x9f, 0xdb, 0xb9, 0xc2, 0xf4, 0xbf, 0x70, 0x51, 0xc2, 0xb, 0x25, 0x3f, 0xf4, 0x91, 0x34, 0x18, 0x6, 0xc2, 0x25},
                    {0x4d, 0xe3, 0x11, 0x0, 0xe5, 0xd9, 0xd0, 0x70, 0x0, 0xdb, 0xd0, 0x70, 0xe5, 0x92, 0x20, 0xb7, 0xea, 0x0, 0x63},
                    {0x3b, 0xe2, 0x98, 0x23, 0x3f, 0x75, 0xef, 0xdf, 0x23, 0xe5, 0xc1, 0x78, 0x3f, 0x93, 0x12, 0xc9, 0x35, 0x23, 0x26},
                    {0x6d, 0x3c, 0xeb, 0xc9, 0x9a, 0xb8, 0x7c, 0x10, 0xc9, 0xbb, 0x9, 0x1, 0x9a, 0x96, 0x7a, 0xda, 0x97, 0xc9, 0xdd},
                    {0x2a, 0xe5, 0xd9, 0x9e, 0xcb, 0x1f, 0xa, 0x67, 0x9e, 0xb2, 0x6b, 0x7f, 0xcb, 0x97, 0x99, 0xee, 0x7d, 0x9e, 0xb},
                    {0x5, 0x6b, 0x7f, 0x5e, 0xf8, 0x41, 0x64, 0x43, 0x5e, 0x57, 0x62, 0xaa, 0xf8, 0x97, 0x3d, 0x27, 0x11, 0x5e, 0x58},
                    {0xdd, 0xc1, 0x78, 0x2f, 0x8a, 0x7e, 0x98, 0x46, 0x2f, 0xd4, 0x8b, 0x3d, 0x8a, 0x9a, 0x8d, 0x5d, 0xb4, 0x2f, 0x15},
                    {0xf7, 0x68, 0x45, 0xfd, 0xb0, 0xe7, 0x57, 0x5b, 0xfd, 0x2c, 0x5e, 0x58, 0xb0, 0x9a, 0xc, 0xfe, 0xf9, 0xfd, 0x54},
                    {0xa9, 0xd3, 0x66, 0x44, 0xfe, 0xbb, 0x24, 0x36, 0x44, 0x12, 0x2a, 0xe5, 0xfe, 0x9a, 0xbd, 0x7a, 0xd9, 0x44, 0x1b},
                    {0x28, 0x34, 0x18, 0x52, 0xbf, 0x8, 0xd8, 0x61, 0x52, 0x65, 0x2a, 0xe5, 0xbf, 0x9c, 0x6, 0x6f, 0x84, 0x52, 0x0},
                    {0xd1, 0x3e, 0xb2, 0x5f, 0xd3, 0x66, 0xb5, 0xd5, 0x5f, 0x5, 0xac, 0x91, 0xd3, 0x9d, 0x8f, 0x73, 0x7f, 0x5f, 0xcf},
                    {0xe1, 0xf8, 0x41, 0x75, 0xc4, 0x1c, 0x60, 0xd0, 0x75, 0xbb, 0x87, 0x17, 0xc4, 0x9e, 0xe5, 0xd9, 0xe3, 0x75, 0x9d},
                    {0x70, 0x51, 0xd1, 0xc5, 0x8d, 0x5d, 0x68, 0x45, 0xc5, 0x27, 0x33, 0xc3, 0x8d, 0xa0, 0x3, 0x7b, 0x9c, 0xc5, 0xa6},
                    {0xee, 0x28, 0x34, 0x5f, 0x91, 0x81, 0xf7, 0x68, 0x5f, 0xab, 0xc4, 0x1c, 0x91, 0xa0, 0x21, 0xfd, 0x42, 0x5f, 0xcf},
                    {0x8a, 0x7e, 0xf3, 0x14, 0x13, 0x7d, 0x77, 0xf5, 0x14, 0xb4, 0x59, 0xcb, 0x13, 0xa1, 0x99, 0xee, 0xd4, 0x14, 0xfa},
                    {0x17, 0xf0, 0x8c, 0xe5, 0x20, 0xb7, 0xe4, 0x69, 0xe5, 0xfe, 0x2b, 0xf1, 0x20, 0xa1, 0xcb, 0x1f, 0x1f, 0xe5, 0xd9},
                    {0xda, 0x57, 0x5b, 0xd2, 0x94, 0x22, 0x67, 0x85, 0xd2, 0xb, 0x47, 0xa0, 0x94, 0xa2, 0xde, 0x1d, 0xeb, 0xd2, 0xb5},
                    {0xcb, 0x1f, 0xc0, 0x19, 0x8, 0x30, 0x25, 0x3f, 0x19, 0x5b, 0x83, 0xec, 0x8, 0xa3, 0x13, 0x7d, 0x6c, 0x19, 0xd4},
                    {0x41, 0x83, 0xec, 0x1a, 0x94, 0x22, 0xf8, 0x41, 0x1a, 0xbc, 0x64, 0x43, 0x94, 0xa3, 0x86, 0x44, 0x71, 0x1a, 0xa2},
                    {0xa, 0x67, 0x85, 0xdf, 0x9c, 0xde, 0xd8, 0x61, 0xdf, 0x6e, 0x9d, 0x5e, 0x9c, 0xa5, 0x65, 0x4d, 0xb2, 0xdf, 0x9e},
                    {0x65, 0x4d, 0xe3, 0xd6, 0x73, 0x8f, 0xc8, 0xe8, 0xd6, 0x62, 0x58, 0x6a, 0x73, 0xa6, 0x20, 0xb7, 0xb0, 0xd6, 0xf6},
                    {0x98, 0x46, 0x5a, 0x5d, 0xce, 0x8b, 0x47, 0xa0, 0x5d, 0x14, 0xbc, 0x65, 0xce, 0xa6, 0x3d, 0x27, 0x3, 0x5d, 0x4c},
                    {0x6b, 0x7f, 0xd2, 0x98, 0x56, 0xb1, 0xcf, 0x8a, 0x98, 0x4f, 0x79, 0xb6, 0x56, 0xa7, 0x15, 0x59, 0x4, 0x98, 0x46},
                    {0xa4, 0x49, 0x3b, 0xf9, 0xce, 0x8b, 0x81, 0xc, 0xf9, 0x68, 0xec, 0xce, 0xce, 0xa8, 0x86, 0x44, 0x31, 0xf9, 0x99},
                    {0x10, 0xca, 0x74, 0xfa, 0xf7, 0x68, 0x8b, 0x3d, 0xfa, 0x8f, 0x72, 0x40, 0xf7, 0xa8, 0x57, 0x5b, 0xfd, 0xfa, 0x2d},
                    {0xa9, 0xd3, 0x66, 0x7, 0xfb, 0xf, 0x85, 0x97, 0x7, 0x74, 0x40, 0x9, 0xfb, 0xa8, 0xd2, 0xb5, 0x77, 0x7, 0xc5},
                    {0x6b, 0x7f, 0xd2, 0xbb, 0x9, 0x1, 0xcb, 0x1f, 0xbb, 0xf4, 0xcc, 0x4b, 0x9, 0xa9, 0x73, 0x8f, 0xbe, 0xbb, 0xea},
                    {0xa5, 0x6, 0x6f, 0x3c, 0x3a, 0x80, 0xbc, 0x65, 0x3c, 0x30, 0xc9, 0xdd, 0x3a, 0xab, 0xd9, 0x35, 0xc3, 0x3c, 0xeb},
                    {0x88, 0xc4, 0x1c, 0xb2, 0xe6, 0x8e, 0xee, 0x28, 0xb2, 0xfd, 0x33, 0xc3, 0xe6, 0xac, 0x67, 0x85, 0x3d, 0xb2, 0x37},
                    {0x5b, 0x39, 0x12, 0x5c, 0xa6, 0x24, 0x31, 0xc7, 0x5c, 0xca, 0xe5, 0xd9, 0xa6, 0xad, 0x1c, 0x9c, 0xc0, 0x5c, 0x4a},
                    {0x1, 0x7c, 0x10, 0x9d, 0xc0, 0xba, 0x8d, 0x5d, 0x9d, 0x72, 0x21, 0xfd, 0xc0, 0xad, 0x2a, 0xe5, 0x58, 0x9d, 0x5e},
                    {0xee, 0x28, 0x34, 0xc0, 0xdb, 0xb9, 0x2a, 0xe5, 0xc0, 0x93, 0xc2, 0x25, 0xdb, 0xad, 0x67, 0x85, 0x15, 0xc0, 0xba},
                    {0xd0, 0x70, 0x51, 0xe3, 0x7b, 0x21, 0x3d, 0x27, 0xe3, 0x22, 0xbb, 0xea, 0x7b, 0xaf, 0xa0, 0xe0, 0x82, 0xe3, 0x11},
                    {0x34, 0x18, 0xad, 0x41, 0xd6, 0xf6, 0xdd, 0xc1, 0x41, 0x1f, 0xd6, 0xf6, 0xd6, 0xb0, 0xf3, 0xd, 0xc6, 0x41, 0x83},
                    {0xde, 0x1d, 0xa4, 0xc1, 0xba, 0xf4, 0x26, 0xf7, 0xc1, 0xdc, 0x51, 0xd1, 0xba, 0xb1, 0x60, 0xd0, 0xd0, 0xc1, 0x78},
                    {0xf6, 0x42, 0x2c, 0x8a, 0xa5, 0x6, 0x30, 0x4, 0x8a, 0xc0, 0xc3, 0x2e, 0xa5, 0xb2, 0x33, 0xc3, 0x2b, 0x8a, 0x7e},
                    {0x8c, 0x64, 0x43, 0x1d, 0xb9, 0x56, 0x0, 0x63, 0x1d, 0xa0, 0xdb, 0xb9, 0xb9, 0xb2, 0xe9, 0x1e, 0x8f, 0x1d, 0xa4},
                    {0xea, 0x87, 0x17, 0xe0, 0x8, 0x30, 0xcc, 0x4b, 0xe0, 0x5d, 0x22, 0x93, 0x8, 0xb6, 0xa5, 0x6, 0x58, 0xe0, 0xe1},
                    {0x53, 0xed, 0x55, 0x9a, 0xb4, 0x8d, 0x19, 0xd4, 0x9a, 0x61, 0x1e, 0x72, 0xb4, 0xb6, 0xd, 0xd7, 0xb8, 0x9a, 0xb8},
                    {0x1c, 0x9c, 0xde, 0x4b, 0xe9, 0x1e, 0xf6, 0x42, 0x4b, 0x7e, 0x26, 0xf7, 0xe9, 0xb6, 0x13, 0x7d, 0xd8, 0x4b, 0xb3},
                    {0x27, 0xcc, 0x4b, 0xd, 0x10, 0xca, 0xf1, 0xa1, 0xd, 0x8d, 0x18, 0xad, 0x10, 0xb7, 0x83, 0xec, 0xe4, 0xd, 0xd7},
                    {0x12, 0xc9, 0xdd, 0xa, 0xc4, 0x1c, 0x5c, 0x4a, 0xa, 0x80, 0x79, 0xb6, 0xc4, 0xb8, 0x5, 0x6b, 0x36, 0xa, 0x67},
                    {0x91, 0x81, 0xc, 0xd1, 0x8f, 0x73, 0xc, 0xfe, 0xd1, 0xf8, 0x57, 0x5b, 0x8f, 0xba, 0x4a, 0xd6, 0xa4, 0xd1, 0x3e},
                    {0xbb, 0xea, 0x87, 0xb8, 0x97, 0x88, 0x20, 0xb7, 0xb8, 0x84, 0xca, 0x74, 0x97, 0xba, 0xd4, 0x48, 0xc5, 0xb8, 0x6c},
                    {0x85, 0x97, 0x88, 0x2b, 0x85, 0x97, 0x56, 0xb1, 0x2b, 0x7, 0xd7, 0xe, 0x85, 0xbb, 0xa6, 0x24, 0xb6, 0x2b, 0xf1},
                    {0x53, 0xed, 0x55, 0xc8, 0xb2, 0x37, 0xac, 0x91, 0xc8, 0x50, 0x9d, 0x5e, 0xb2, 0xbb, 0xcb, 0x1f, 0x72, 0xc8, 0xe8},
                    {0xb1, 0xc8, 0xe8, 0x40, 0xe8, 0x9b, 0x9c, 0xde, 0x40, 0xc1, 0x41, 0x83, 0xe8, 0xbb, 0xc0, 0xba, 0x1e, 0x40, 0x9},
                    {0xae, 0xe4, 0x69, 0x22, 0x96, 0x90, 0xfe, 0xbb, 0x22, 0xd, 0xe2, 0x98, 0x96, 0xbc, 0xd1, 0x3e, 0x72, 0x22, 0x93},
                    {0xb9, 0x56, 0xb1, 0x7e, 0xcf, 0x8a, 0xb9, 0x56, 0x7e, 0xb1, 0xcf, 0x8a, 0xcf, 0xbc, 0xbc, 0x65, 0x7b, 0x7e, 0xf3},
                    {0xd0, 0x70, 0x51, 0x74, 0xe8, 0x9b, 0x1f, 0xc0, 0x74, 0xd5, 0xbb, 0xea, 0xe8, 0xbc, 0x9a, 0xb8, 0x78, 0x74, 0x92},
                    {0x5, 0x6b, 0x7f, 0xb4, 0x7d, 0xff, 0x82, 0x13, 0xb4, 0xbc, 0x77, 0xf5, 0x7d, 0xbd, 0xe1, 0xf8, 0xae, 0xb4, 0x8d},
                    {0x9e, 0xb, 0x2b, 0x33, 0xa5, 0x6, 0x65, 0x4d, 0x33, 0xf4, 0xfc, 0xb0, 0xa5, 0xbe, 0xda, 0x57, 0x4f, 0x33, 0xc3},
                    {0x5a, 0xbe, 0xae, 0xea, 0xc8, 0xe8, 0xaa, 0xac, 0xea, 0x35, 0xfa, 0x2d, 0xc8, 0xbe, 0x22, 0x93, 0x7f, 0xea, 0x87},
                    {0xcc, 0x4b, 0xb3, 0x98, 0xee, 0x28, 0xf7, 0x68, 0x98, 0x96, 0x2b, 0xf1, 0xee, 0xc0, 0xcc, 0x4b, 0x38, 0x98, 0x46},
                    {0x28, 0x34, 0x18, 0xee, 0x44, 0x1b, 0x2f, 0x15, 0xee, 0x97, 0xaf, 0x79, 0x44, 0xc1, 0xa3, 0xa, 0x46, 0xee, 0x28},
                    {0x5a, 0xbe, 0xae, 0xeb, 0x66, 0x33, 0xc6, 0xb4, 0xeb, 0xa5, 0x25, 0x3f, 0x66, 0xc1, 0xbb, 0xea, 0x58, 0xeb, 0xe9},
                    {0xc6, 0xb4, 0x8d, 0x17, 0x8f, 0x73, 0x48, 0x52, 0x17, 0x3, 0x51, 0xd1, 0x8f, 0xc1, 0x8f, 0x73, 0x88, 0x17, 0xf0},
                    {0x33, 0xc3, 0x2e, 0xbc, 0x47, 0xa0, 0x8d, 0x5d, 0xbc, 0x23, 0x58, 0x6a, 0x47, 0xc3, 0x6e, 0x9f, 0x10, 0xbc, 0x65},
                    {0x5, 0x6b, 0x7f, 0x29, 0x63, 0xfb, 0xc8, 0xe8, 0x29, 0xf9, 0x35, 0x96, 0x63, 0xc3, 0xff, 0x16, 0xc9, 0x29, 0xa5},
                    {0x75, 0x9d, 0x5e, 0x1, 0x62, 0xaa, 0xcc, 0x4b, 0x1, 0xf8, 0xff, 0x16, 0x62, 0xc6, 0xe8, 0x9b, 0x1f, 0x1, 0x7c},
                    {0xff, 0x16, 0x47, 0x0, 0x72, 0x40, 0x8a, 0x7e, 0x0, 0xa5, 0x71, 0xa3, 0x72, 0xc6, 0x5e, 0x58, 0x30, 0x0, 0x63},
                    {0x96, 0x90, 0x60, 0xb8, 0x2d, 0xd8, 0x86, 0x44, 0xb8, 0x4a, 0xc1, 0x78, 0x2d, 0xc7, 0x1a, 0xa2, 0x30, 0xb8, 0x6c},
                    {0x70, 0x51, 0xd1, 0x2b, 0xa4, 0x49, 0xec, 0xce, 0x2b, 0x45, 0x16, 0x47, 0xa4, 0xc7, 0xe4, 0x69, 0x8c, 0x2b, 0xf1},
                    {0xce, 0x8b, 0x3d, 0xce, 0xf6, 0x42, 0x7e, 0xf3, 0xce, 0xc7, 0x8, 0x30, 0xf6, 0xc7, 0xfa, 0x2d, 0x25, 0xce, 0x8b},
                    {0x6, 0x6f, 0xa8, 0x35, 0x66, 0x33, 0xdc, 0x86, 0x35, 0x6c, 0x34, 0x18, 0x66, 0xc8, 0xfc, 0xb0, 0xd, 0x35, 0x96},
                    {0xd7, 0xe, 0xab, 0x4b, 0xfb, 0xf, 0x78, 0xbc, 0x4b, 0x3c, 0xbe, 0xae, 0xfb, 0xca, 0x51, 0xd1, 0x6b, 0x4b, 0xb3},
                    {0x9b, 0x14, 0xfa, 0xd1, 0xee, 0x28, 0x8d, 0x5d, 0xd1, 0xb6, 0x33, 0xc3, 0xee, 0xce, 0x4, 0xf2, 0x61, 0xd1, 0x3e},
                    {0xf0, 0x8c, 0x64, 0x28, 0x37, 0x9a, 0x34, 0x18, 0x28, 0xbf, 0x63, 0xfb, 0x37, 0xd1, 0xa7, 0x5c, 0x99, 0x28, 0x34},
                    {0x11, 0x82, 0x13, 0x10, 0x35, 0x96, 0xbc, 0x65, 0x10, 0x1c, 0x55, 0xfc, 0x35, 0xd2, 0x68, 0x45, 0x53, 0x10, 0xca},
                    {0x19, 0xd4, 0x48, 0xce, 0x1d, 0xa4, 0xe9, 0x1e, 0xce, 0x50, 0x61, 0xef, 0x1d, 0xd4, 0x6d, 0x3c, 0x84, 0xce, 0x8b},
                    {0x5c, 0x4a, 0xd6, 0x9c, 0xf, 0x76, 0x9a, 0xb8, 0x9c, 0x6b, 0x18, 0xad, 0xf, 0xd5, 0x76, 0x38, 0xb1, 0x9c, 0xde},
                    {0x37, 0x9a, 0xb8, 0x72, 0x24, 0x36, 0xd1, 0x3e, 0x72, 0xd0, 0x14, 0xfa, 0x24, 0xd5, 0xd9, 0x35, 0xe7, 0x72, 0x40},
                    {0xc9, 0xdd, 0xc1, 0x60, 0x8b, 0x3d, 0xe3, 0x11, 0x60, 0xcd, 0x71, 0xa3, 0x8b, 0xd5, 0xbd, 0x7a, 0x3b, 0x60, 0xd0},
                    {0x1f, 0xc0, 0xba, 0x1c, 0xbb, 0xea, 0xfa, 0x2d, 0x1c, 0x27, 0x39, 0x12, 0xbb, 0xd7, 0xf9, 0x99, 0x4f, 0x1c, 0x9c},
                    {0xdf, 0x9e, 0xb, 0xf3, 0x50, 0x53, 0x56, 0xb1, 0xf3, 0xc8, 0xb1, 0xc8, 0x50, 0xd9, 0x1f, 0xc0, 0xeb, 0xf3, 0xd},
                    {0x7e, 0xf3, 0xd, 0xb4, 0x23, 0x26, 0x56, 0xb1, 0xb4, 0xe9, 0x2b, 0xf1, 0x23, 0xdb, 0xb4, 0x8d, 0x52, 0xb4, 0x8d},
                    {0x7a, 0xda, 0x57, 0x94, 0x88, 0xc4, 0xcd, 0xbd, 0x94, 0xbc, 0x5d, 0x4c, 0x88, 0xdb, 0x2f, 0x15, 0xbd, 0x94, 0x22},
                    {0xb9, 0x56, 0xb1, 0x10, 0xd5, 0x3, 0x6e, 0x9f, 0x10, 0x15, 0x44, 0x1b, 0xd5, 0xdc, 0x61, 0xef, 0x1e, 0x10, 0xca},
                    {0x63, 0xfb, 0xf, 0xc4, 0x64, 0x43, 0x21, 0xfd, 0xc4, 0xb4, 0x74, 0x92, 0x64, 0xdd, 0x28, 0x34, 0xa4, 0xc4, 0x1c},
                    {0x86, 0x44, 0x1b, 0x27, 0x1b, 0xaf, 0x8b, 0x3d, 0x27, 0xe0, 0x92, 0x4f, 0x1b, 0xdf, 0xab, 0x62, 0x20, 0x27, 0xcc},
                    {0xb8, 0x6c, 0x50, 0x3a, 0x82, 0x13, 0x6, 0x6f, 0x3a, 0x6, 0xac, 0x91, 0x82, 0xe0, 0xcb, 0x1f, 0x25, 0x3a, 0x80},
                    {0x5b, 0x39, 0x12, 0x4f, 0x14, 0xfa, 0xb2, 0x37, 0x4f, 0x6f, 0x48, 0x52, 0x14, 0xe2, 0x30, 0x4, 0x94, 0x4f, 0x84},
                    {0xab, 0x62, 0xaa, 0x5a, 0x46, 0x5a, 0xc8, 0xe8, 0x5a, 0xfa, 0xe8, 0x9b, 0x46, 0xe2, 0x54, 0x20, 0xf7, 0x5a, 0xbe},
                    {0xd3, 0x66, 0x33, 0xac, 0x47, 0xa0, 0x20, 0xb7, 0xac, 0x38, 0xa7, 0x5c, 0x47, 0xe2, 0xb9, 0x56, 0xd1, 0xac, 0x91},
                    {0x7b, 0x21, 0xfd, 0x21, 0x69, 0xf9, 0xf9, 0x99, 0x21, 0x17, 0x31, 0xc7, 0x69, 0xe3, 0x43, 0x1a, 0x1, 0x21, 0xfd},
                    {0xaa, 0xac, 0x91, 0x66, 0x7c, 0x10, 0x34, 0x18, 0x66, 0xbc, 0x5f, 0xcf, 0x7c, 0xe4, 0x7f, 0xd2, 0x84, 0x66, 0x33},
                    {0x56, 0xb1, 0xc8, 0xef, 0xbc, 0x65, 0x6b, 0x7f, 0xef, 0x70, 0xb, 0x2b, 0xbc, 0xe4, 0xee, 0x28, 0xff, 0xef, 0xdf},
                    {0x12, 0xc9, 0xdd, 0xb6, 0x28, 0x34, 0x33, 0xc3, 0xb6, 0x72, 0xf8, 0x41, 0x28, 0xe5, 0x5d, 0x4c, 0xef, 0xb6, 0x4e},
                    {0x91, 0x81, 0xc, 0x3f, 0x2e, 0x31, 0xa9, 0xd3, 0x3f, 0x31, 0x6, 0x6f, 0x2e, 0xe6, 0xac, 0x91, 0xb0, 0x3f, 0x75},
                    {0x52, 0x0, 0x63, 0xb, 0x35, 0x96, 0xe, 0xab, 0xb, 0xac, 0xfb, 0xf, 0x35, 0xe6, 0x5d, 0x4c, 0x24, 0xb, 0x2b},
                    {0x75, 0x9d, 0x5e, 0x2b, 0xb3, 0x6d, 0x17, 0xf0, 0x2b, 0xf9, 0x91, 0x81, 0xb3, 0xe6, 0x58, 0x6a, 0xaf, 0x2b, 0xf1},
                    {0x9, 0x1, 0x7c, 0x6f, 0x72, 0x40, 0x35, 0x96, 0x6f, 0x35, 0xd5, 0x3, 0x72, 0xe8, 0xf7, 0x68, 0xe8, 0x6f, 0xa8},
                    {0xdb, 0xb9, 0x56, 0x43, 0xa5, 0x6, 0x6c, 0x50, 0x43, 0xd1, 0xb, 0x2b, 0xa5, 0xe8, 0x73, 0x8f, 0x5c, 0x43, 0x1a},
                    {0x51, 0xd1, 0x3e, 0xf4, 0x3f, 0x75, 0xd, 0xd7, 0xf4, 0xe7, 0x23, 0x26, 0x3f, 0xea, 0xef, 0xdf, 0x26, 0xf4, 0xbf},
                    {0xc, 0xfe, 0xbb, 0xdc, 0x25, 0x3f, 0xd0, 0x70, 0xdc, 0x69, 0xf1, 0xa1, 0x25, 0xec, 0x2d, 0xd8, 0x95, 0xdc, 0x86},
                    {0xd, 0xd7, 0xe, 0xc7, 0x71, 0xa3, 0x7f, 0xd2, 0xc7, 0x78, 0xf8, 0x41, 0x71, 0xef, 0xcc, 0x4b, 0xe8, 0xc7, 0xc6},
                    {0x7c, 0x10, 0xca, 0x76, 0xc5, 0xa6, 0x80, 0xcd, 0x76, 0x5, 0x2f, 0x15, 0xc5, 0xf0, 0x2, 0x77, 0xa8, 0x76, 0x38},
                    {0xbc, 0x65, 0x4d, 0x6, 0xa5, 0x6, 0x7d, 0xff, 0x6, 0xd1, 0x32, 0x23, 0xa5, 0xf1, 0x79, 0xb6, 0x22, 0x6, 0x6f},
                    {0x94, 0x22, 0x93, 0xf1, 0xac, 0x91, 0x37, 0x9a, 0xf1, 0x4e, 0x60, 0xd0, 0xac, 0xf1, 0x7c, 0x10, 0xe4, 0xf1, 0xa1},
                    {0xf3, 0xd, 0xd7, 0x46, 0xd5, 0x3, 0xf7, 0x68, 0x46, 0xf4, 0x1c, 0x9c, 0xd5, 0xf2, 0x4a, 0xd6, 0x7a, 0x46, 0x5a},
                    {0xc0, 0xba, 0xf4, 0x12, 0x5a, 0xbe, 0x91, 0x81, 0x12, 0x1a, 0xd5, 0x3, 0x5a, 0xf3, 0xc7, 0xc6, 0x9d, 0x12, 0xc9},
                    {0xbe, 0xae, 0xe4, 0x5b, 0x5e, 0x58, 0x82, 0x13, 0x5b, 0x36, 0x7f, 0xd2, 0x5e, 0xf5, 0x24, 0x36, 0x21, 0x5b, 0x39},
                    {0x60, 0xd0, 0x70, 0x39, 0xb2, 0x37, 0x87, 0x17, 0x39, 0x73, 0x86, 0x44, 0xb2, 0xf5, 0xba, 0xf4, 0xf, 0x39, 0x12},
                    {0xb7, 0xa9, 0xd3, 0xa0, 0x8a, 0x7e, 0xb3, 0x6d, 0xa0, 0x97, 0x59, 0xcb, 0x8a, 0xf6, 0x76, 0x38, 0xb2, 0xa0, 0xe0},
                    {0x6c, 0x50, 0x53, 0xf6, 0x54, 0x20, 0xaa, 0xac, 0xf6, 0xc3, 0xa3, 0xa, 0x54, 0xf7, 0xef, 0xdf, 0x2c, 0xf6, 0x42},
                    {0xc5, 0xa6, 0x24, 0x49, 0x7, 0xc5, 0xae, 0xe4, 0x49, 0xae, 0xee, 0x28, 0x7, 0xfa, 0x4c, 0x29, 0x99, 0x49, 0x3b},
                    {0xf2, 0x89, 0xa7, 0xe7, 0x64, 0x43, 0x3f, 0x75, 0xe7, 0x33, 0x65, 0x4d, 0x64, 0xfb, 0x11, 0x82, 0x13, 0xe7, 0x94},
                    {0x38, 0x7, 0xc5, 0xc4, 0x77, 0xf5, 0xf5, 0xe6, 0xc4, 0x81, 0xf0, 0x8c, 0x77, 0xfb, 0x1d, 0xa4, 0x25, 0xc4, 0x1c},
                    {0x47, 0xa0, 0xe0, 0x26, 0x71, 0xa3, 0xe5, 0xd9, 0x26, 0x8e, 0x9e, 0xb, 0x71, 0xfd, 0xe6, 0x8e, 0xb0, 0x26, 0xf7}};
    
    int MC3_zero[8] = {1,2,6,7,8,11,12,13};
    for(uint32_t MC40 = 0; MC40 < 0x100; MC40++){
        for(uint32_t gray = 0; gray < 0x10000; gray++){
            uint8_t fix_b[19] = {0};
            for(int i = 0; i < blue_number; i++){
                fix_b[i] = BlueInitState[0][i];
            }

            map<uint8_t, vector<uint8_t>> TableRed;

            for(uint32_t red =0; red < 0x100; red++){
                uint8_t tmpS[32];
                uint8_t newS[32];
                for(int i = 0; i < 32; i++){
                    sKey[i] = 0;
                }
                sKey[3] = red;
                for(int i = 0; i < blue_number; i++){
                    sKey[blue_index[i]] = fix_b[i];
                } 

                for(int i = 0; i < 32; i++){
                    newS[i] = sKey[i];
                }
                for(int i = skey_start_round; i > -1; i--) {
                    KeyExpansion_S2RK(newS,i);
                    KeyExpansion_S2S_inv(newS,tmpS);
                    for(int j = 0; j < 32; j++){
                        newS[j] = tmpS[j];
                    }
                }
                for(int i = 0; i < 32; i++){
                    newS[i] = sKey[i];
                }
                for(int i = skey_start_round+1; i < skey_round ; i++) {
                    KeyExpansion_S2S(newS,tmpS);
                    for(int j = 0; j < 32; j++){
                        newS[j] = tmpS[j];
                    }
                    KeyExpansion_S2RK(newS,i);
                }

                uint8_t state[16] = {0};
                state[0] = take8(MC40,0);
                state[2] = take8(red,0) ^ take8(gray,0);
                state[6] = take8(red,0) ^ take8(gray,1);
                InvMixColumn16(state);
                InvShiftRow16(state); 
                InvSubByte16(state);
                AddRoundKey16(state,4);
                for(int j=0; j<8;j++){
                    state[MC3_zero[j]] = 0;
                }
                
                for(int i = 3; i > -1; i--){
                    InvMixColumn16(state);
                    InvShiftRow16(state); 
                    InvSubByte16(state);
                    AddRoundKey16(state,i);
                }

                AddRoundKey16(state,10);
                InvShiftRow16(state); 
                InvSubByte16(state); 

                uint8_t tmpRedMatch = 0; 
                tmpRedMatch = mul3(state[12]) ^ state[14] ^ RoundKey[16*9+14];
                if(TableRed.find(tmpRedMatch) != TableRed.end())
                {
                    vector<uint8_t> ttmp =TableRed[tmpRedMatch];
                    ttmp.push_back(take8(red,0));
                    TableRed[tmpRedMatch] = ttmp;
                } else {
                    vector<uint8_t> ttmp;
                    ttmp.push_back(take8(red,0));
                    TableRed[tmpRedMatch] = ttmp;
                }
            }


            for(int blue = 0; blue < BlueInitState.size(); blue++){
                uint8_t state[16] = {0};
                uint8_t tmpS[32];
                uint8_t newS[32];
                
                for(int i = 0; i < 32; i++){
                    sKey[i] = 0;
                }

                for(int i = 0; i < blue_number; i++){
                    sKey[blue_index[i]] = BlueInitState[blue][i];
                } 

                for(int i = 0; i < 32; i++){
                    newS[i] = sKey[i];
                }
                for(int i = skey_start_round; i > -1; i--) {
                    KeyExpansion_S2RK(newS,i);
                    KeyExpansion_S2S_inv(newS,tmpS);
                    for(int j = 0; j < 32; j++){
                        newS[j] = tmpS[j];
                    }
                }
                for(int i = 0; i < 32; i++){
                    newS[i] = sKey[i];
                }
                for(int i = skey_start_round+1; i < skey_round ; i++) {
                    KeyExpansion_S2S(newS,tmpS);
                    for(int j = 0; j < 32; j++){
                        newS[j] = tmpS[j];
                    }
                    KeyExpansion_S2RK(newS,i);
                }

                for(int i = 0; i < 8; i++){
                    state[state_blue_index[i]] = RoundKey[4*16 + state_blue_index[i]];
                }
                subByte16(state);
                ShiftRow16(state);
                MixColumn16(state);
                state[0] = take8(MC40,0);
                state[1] = 0;
                state[3] = 0;
                state[4] = 0;
                state[5] = 0;
                state[7] = 0;
                AddRoundKey16(state,5);
                state[2] = take8(gray,0);
                state[6] = take8(gray,1); 
                for(int i = 6; i < 9; i++){
                    subByte16(state);
                    ShiftRow16(state);
                    MixColumn16(state);
                    AddRoundKey16(state,i);
                }
                
                subByte16(state);
                ShiftRow16(state);

                uint32_t tmpBlueMatch = 0;
                tmpBlueMatch = mul3(mul2(state[12])) ^ state[12] ^ mul3(mul3(state[13])) ^ state[13] ^ mul3(state[14]) ^ mul2(state[14]) ^ mul3(RoundKey[16*9+12]);

                if(TableRed.find(tmpBlueMatch) != TableRed.end()) {
                    vector<uint8_t> ttmp = TableRed[tmpBlueMatch];
                    MatchNum += ttmp.size();

                    //verify
                    for (int k=0; k<ttmp.size(); k++) {
                        uint8_t tmpRed = ttmp[k];
                        sKey[3] = tmpRed;
                        for(int i = 0; i < 32; i++){
                            newS[i] = sKey[i];
                        }
                        for(int i = skey_start_round; i > -1; i--) {
                            KeyExpansion_S2RK(newS,i);
                            KeyExpansion_S2S_inv(newS,tmpS);
                            for(int j = 0; j < 32; j++){
                                newS[j] = tmpS[j];
                            }
                        }
                        for(int i = 0; i < 32; i++){
                            newS[i] = sKey[i];
                        }
                        for(int i = skey_start_round+1; i < skey_round ; i++) {
                            KeyExpansion_S2S(newS,tmpS);
                            for(int j = 0; j < 32; j++){
                                newS[j] = tmpS[j];
                            }
                            KeyExpansion_S2RK(newS,i);
                        }

                        for(int i = 0; i < 16; i++){
                            state[i] = 0;
                        }
                        state[0] = take8(MC40,0);
                        state[2] = tmpRed ^ take8(gray,0);
                        state[6] = tmpRed ^ take8(gray,1);
                        InvMixColumn16(state);
                        InvShiftRow16(state); 
                        InvSubByte16(state);
                        uint8_t getState[16] = {0};
                        for(int i = 0; i < 8; i++){
                            getState[state_red_index[i]] = state[state_red_index[i]];
                        } 
                        AddRoundKey16(state,4);
                        for(int j=0; j<8;j++){
                            state[MC3_zero[j]] = 0;
                        }
                        for(int i = 3; i > -1; i--){
                            InvMixColumn16(state);
                            InvShiftRow16(state); 
                            InvSubByte16(state);
                            AddRoundKey16(state,i);
                        }

                        uint8_t redTag[5] = {state[0],state[1],state[2],state[6],state[12]};
                        


                        for(int i = 0; i < 16; i++){
                            state[i] = 0;
                        }

                        for(int i = 0; i < 8; i++){
                            state[state_blue_index[i]] = RoundKey[4*16 + state_blue_index[i]];
                        }
                        for(int i = 0; i < 8; i++){
                            getState[state_blue_index[i]] = state[state_blue_index[i]];
                        } 
                        subByte16(state);
                        ShiftRow16(state);
                        MixColumn16(state);
                        state[0] = take8(MC40,0);
                        state[1] = 0;
                        state[3] = 0;
                        state[4] = 0;
                        state[5] = 0;
                        state[7] = 0;
                        AddRoundKey16(state,5);
                        state[2] = take8(gray,0);
                        state[6] = take8(gray,1);
                        for(int i = 6; i < 10; i++){
                            subByte16(state);
                            ShiftRow16(state);
                            MixColumn16(state);
                            AddRoundKey16(state,i);
                        }
                        subByte16(state);
                        ShiftRow16(state);
                        AddRoundKey16(state,10);
                        
                        if ((state[0]==redTag[0]) && (state[1]==redTag[1]) && (state[2]==redTag[2]) && (state[6]==redTag[3]) && (state[12]==redTag[4])){
                            SucceedNum += 1;
                            vector<uint8_t> sucIma;
                            for(int i = 0; i < 32; i++){
                                sucIma.push_back(sKey[i]);
                            }
                            for(int i = 0; i < 16; i++){
                                sucIma.push_back(getState[i]);
                            }
                            PreImage.push_back(sucIma);
                        }
                    }
                }

            }
    
            
        }
    }
    end_time = clock();
    cout << "Finish! time is: " <<(double)(end_time - start_time) / CLOCKS_PER_SEC << "s" << endl;
    cout << "In total, 2^" << log(double(MatchNum))/log(2.0) << " match are tested!" << endl;
    cout << "In total, 2^" << log(double(SucceedNum))/log(2.0) << " success are found!" << endl;
    
    for (int k=0; k<PreImage.size(); k++) {
        for(int i = 0; i < PreImage[k].size(); i++) {
            printf("0x%02x, ", PreImage[k][i]);
        }printf("\n");
    }
}

void verify(){
    uint8_t sKey[32] = {0x40, 0x09, 0x01, 0x7a, 0x2d, 0x00, 0x50, 0x53, 0x90, 0x60, 0x2d, 0x00, 0x70, 0x00, 0x00, 0x00, 0x30, 0x04, 0x50, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x11, 0x82, 0x23, 0x00, 0x00, 0x00, 0x2d, 0xd8};
    uint8_t init_state[16] = {0xb9, 0x7e, 0xf2, 0xba, 0x89, 0x36, 0x01, 0x23, 0x20, 0x6c, 0x59, 0x8e, 0x50, 0x2d, 0x70, 0x43};
    
    //uint8_t sKey[32] = {0xc7, 0xc6, 0xb4, 0xff, 0xe7, 0x00, 0xb3, 0x6d, 0x5a, 0xbe, 0xe7, 0x00, 0x51, 0x00, 0x00, 0x00, 0xa9, 0xd3, 0xb3, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x73, 0x8f, 0xb5, 0x00, 0x00, 0x00, 0xe7, 0x94};
    //uint8_t init_state[16] = {0x57, 0x2d, 0x8d, 0xc3, 0x50, 0x57, 0xb4, 0xb5, 0xe2, 0x75, 0xe3, 0x4e, 0xb3, 0xe7, 0x28, 0x9c};

    //uint8_t sKey[32] = {0xe0, 0xe1, 0xf8, 0x6e, 0xd3, 0x00, 0x34, 0x18, 0x79, 0xb6, 0xd3, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xa0, 0xe0, 0x34, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x5f, 0xcf, 0xc3, 0x00, 0x00, 0x00, 0xd3, 0x66};
    //uint8_t init_state[16] = {0xcd, 0x10, 0xe2, 0x6e, 0x40, 0xd8, 0xf8, 0xc3, 0x58, 0x19, 0x1a, 0x8e, 0x34, 0xd3, 0xbb, 0x11};

    //uint8_t sKey[32] = {0xc0, 0xba, 0xf4, 0x17, 0x12, 0x00, 0x5a, 0xbe, 0x91, 0x81, 0x12, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xd5, 0x03, 0x5a, 0x00, 0xf3, 0x00, 0x00, 0x00, 0xc7, 0xc6, 0x9d, 0x00, 0x00, 0x00, 0x12, 0xc9};
    //uint8_t init_state[16] = {0xbf, 0xa4, 0x06, 0x44, 0x87, 0x32, 0xf4, 0x9d, 0x40, 0xde, 0x3c, 0xf3, 0x5a, 0x12, 0x39, 0xf7};

    uint8_t state[16] = {0};
    uint8_t newS[32] = {0};
    uint8_t tmpS[32] = {0};
    
    int skey_start_round = 3;
    int skey_round = 6;
    int state_blue_index[8] = {1,2,6,7,8,11,12,13};
    int state_red_index[8] = {0,3,4,5,9,10,14,15};

    for(int i = 0; i < 32; i++){
        newS[i] = sKey[i];
    }
    for(int i = skey_start_round; i > -1; i--) {
        KeyExpansion_S2RK(newS,i);
        KeyExpansion_S2S_inv(newS,tmpS);
        for(int j = 0; j < 32; j++){
            newS[j] = tmpS[j];
        }
    }
    for(int i = 0; i < 32; i++){
        newS[i] = sKey[i];
    }
    for(int i = skey_start_round+1; i < skey_round ; i++) {
        KeyExpansion_S2S(newS,tmpS);
        for(int j = 0; j < 32; j++){
            newS[j] = tmpS[j];
        }
        KeyExpansion_S2RK(newS,i);
    }

    for(int i = 0; i < 16; i++){
        state[i] = init_state[i];
    }
    for(int i = 4; i > 0; i--){
        AddRoundKey16(state,i);
        InvMixColumn16(state);
        InvShiftRow16(state); 
        InvSubByte16(state);
    }
    AddRoundKey16(state,0);

    uint8_t redTag[16] = {0};
    for(int i = 0; i < 16; i++){
        redTag[i] = state[i];
    }


    for(int i = 0; i < 16; i++){
        state[i] = init_state[i];
    }

    for(int i = 5; i < 10; i++){
        subByte16(state);
        ShiftRow16(state);
        MixColumn16(state);
        AddRoundKey16(state,i);
    }
    subByte16(state);
    ShiftRow16(state);
    AddRoundKey16(state,10);
    for(int i = 0; i < 16; i++){
        state[i] = state[i] ^ redTag[i];
    }
    printf("HASH TAG: ");
    for(int i = 0; i < 16; i++) {
        printf("0x%02x, ", state[i]);
    }printf("\n");
    
}




int main()
{
    printf("begin main\n");

    aes_256_preimage_attack();
    //verify();

    printf("end main\n");

    return 0;
}
